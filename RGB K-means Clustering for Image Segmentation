# kmeans_rgb_clustering.py
"""
RGB K-means Clustering for Image Segmentation

This script applies MiniBatchKMeans clustering on RGB channels of two images to segment
them based on color. Optimized for large images with configurable clusters and progress tracking.

Author: BehRaD
License: MIT
"""

import numpy as np
import cv2
from sklearn.cluster import MiniBatchKMeans
import argparse
from typing import Tuple
from dataclasses import dataclass

@dataclass
class Config:
    """Configuration class for clustering parameters."""
    n_clusters: int = 32
    n_init: int = 20
    batch_size: int = 10000
    random_state: int = 0
    verbose: int = 1

def load_image(file_path: str) -> np.ndarray:
    """
    Load and convert image from BGR to RGB.

    Args:
        file_path: Path to image file.

    Returns:
        RGB image array.

    Raises:
        FileNotFoundError: If image cannot be loaded.
        ValueError: If image does not have 3 channels.
    """
    image = cv2.imread(file_path)
    if image is None:
        raise FileNotFoundError(f"Could not load image from {file_path}")
    if image.shape[2] != 3:
        raise ValueError(f"Expected 3-channel RGB image, got {image.shape[2]} channels")
    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

def save_image(image: np.ndarray, file_path: str) -> None:
    """
    Save RGB image after converting to BGR.

    Args:
        image: RGB image array.
        file_path: Output path for saving image.
    """
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    cv2.imwrite(file_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))

def cluster_images_rgb(image_a: np.ndarray, image_b: np.ndarray, 
                     config: Config) -> Tuple[np.ndarray, np.ndarray]:
    """
    Apply K-means clustering on RGB channels of two images.

    Args:
        image_a: First input RGB image (height, width, 3).
        image_b: Second input RGB image (height, width, 3).
        config: Configuration object with clustering parameters.

    Returns:
        Tuple of segmented RGB images (uint8) for both inputs.

    Raises:
        ValueError: If images have different dimensions.
    """
    # Validate image dimensions
    if image_a.shape != image_b.shape:
        raise ValueError("Images must have the same dimensions")

    height, width, _ = image_a.shape

    # Reshape images to (n_pixels, 3)
    pixels_a = image_a.reshape((-1, 3)).astype(np.float32)
    pixels_b = image_b.reshape((-1, 3)).astype(np.float32)

    # Combine pixels
    combined_pixels = np.vstack([pixels_a, pixels_b])

    # Apply MiniBatchKMeans
    model = MiniBatchKMeans(
        n_clusters=config.n_clusters,
        random_state=config.random_state,
        n_init=config.n_init,
        batch_size=config.batch_size,
        verbose=config.verbose
    ).fit(combined_pixels)

    # Split labels
    n_pixels_a = pixels_a.shape[0]
    labels_a = model.labels_[:n_pixels_a]
    labels_b = model.labels_[n_pixels_a:]

    # Map pixels to cluster centers
    segmented_image_a = model.cluster_centers_[labels_a].reshape(height, width, 3)
    segmented_image_b = model.cluster_centers_[labels_b].reshape(height, width, 3)

    return np.uint8(segmented_image_a), np.uint8(segmented_image_b)

def main():
    """Main function with command-line interface."""
    parser = argparse.ArgumentParser(
        description="RGB K-means clustering for image segmentation"
    )
    parser.add_argument("--image_a", required=True, help="Path to first input image")
    parser.add_argument("--image_b", required=True, help="Path to second input image")
    parser.add_argument("--output_a", required=True, help="Output path for segmented image A")
    parser.add_argument("--output_b", required=True, help="Output path for segmented image B")
    parser.add_argument("--n_clusters", type=int, default=32, help="Number of clusters")
    parser.add_argument("--n_init", type=int, default=20, help="Number of K-means iterations")
    parser.add_argument("--batch_size", type=int, default=10000, help="Batch size for MiniBatchKMeans")

    args = parser.parse_args()

    # Initialize configuration
    config = Config(
        n_clusters=args.n_clusters,
        n_init=args.n_init,
        batch_size=args.batch_size
    )

    # Load images
    image_a = load_image(args.image_a)
    image_b = load_image(args.image_b)

    # Apply clustering
    segmented_a, segmented_b = cluster_images_rgb(image_a, image_b, config)

    # Save results
    save_image(segmented_a, args.output_a)
    save_image(segmented_b, args.output_b)
    print(f"Segmented images saved to {args.output_a} and {args.output_b}")

if __name__ == "__main__":
    main()
